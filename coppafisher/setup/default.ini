; Default parameters
;
; Do not modify this file!  If you would like to change a value, create a new
; settings.ini file and set only the parameters you would like to be different
; than those found in this file (the defaults).
;
; For extraction to markdown, we need:
; A comment for each section and variable (can be blank though).
; Lines after a header are the comments describing that section.
; Lines before a variable are the comment for that variable.
; Need an empty line between section comment and comment of first variable in that section.
; Separator between variable name and default value is ' = ' i.e. a space on each side.


[file_names]
; The *file_names* section specifies the files that will be used throughout the pipeline.
; Variables in this section can be changed at any point in the pipeline, and the notebook created using it can still
; be loaded in.


; Name of notebook file in output directory will be *notebook_name*
notebook_name = notebook

; Directory where the raw .nd2 files or .npy stacks are
input_dir =

; Directory where the notebook and other output files are saved.
output_dir =

; Directory where raw, extract images are saved
tile_dir =

; Names of .nd2 files for the imaging rounds. Leave empty if only using anchor.
round =

; Name of the file for the anchor round.
anchor =

; .nd2, jobs or .npy indicating the data type of the raw data.
raw_extension = .nd2

; If .npy raw_extension, this is the name of the .json file in *input_dir* which contains the metadata
; required extracted from the initial .nd2 files.
; I.e. it contains the output of *coppafisher/utils/nd2/save_metadata*:
;
; - `xy_pos` - `List [n_tiles x 2]`. xy position of tiles in pixels.
;
; - `pixel_microns` - `float`. xy pixel size in microns.
;
; - `pixel_microns_z` - `float`. z pixel size in microns.
;
; - `sizes` - dict with fov (`t`), channels (`c`), y, x, z-planes (`z`) dimensions.
raw_metadata =

; The channel indices of the anchor channel and the DAPI channel (in that order) inside of the anchor's raw input
; file(s). For example, set this to `7, 0` if the anchor channel is at index 7 and the DAPI channel is at index 0.
; If left blank, then the anchor and anchor-DAPI channel are assumed to be at the same indices like in the raw sequence
; files.
raw_anchor_channel_indices =

; Text file which contains the codes indicating which dye to expect on each round for each gene.
code_book =

; Compressed numpy .npz file indicating average spot shape (point spread function) as shape zyx.
; The psf must be saved at key "arr_0".
; If left blank, the default PSF at coppafisher/setup/default_psf.npz will be used.
psf =

; A 2D fluorescent bead image for all channels. This is used during to register channels together. Currently, only an
; ND2 file is supported.
; If left blank, then no bead image is used.
fluorescent_bead_path =

; location of npy file containing (n_channels x n_dyes) ndarray to use as the initial bleed matrix. If empty, uses
; a hardcoded matrix, located in the ``call_reference_spots.py`` script.
initial_bleed_matrix =

; The OMP mean spot used for computing the OMP score images for each gene. It must have shape `(im_y x im_x x im_z)`
; with a float dtype. All dimensions must be odd. For details on how genes are scored, see omp method in the
; documentation.
; If blank, the default mean spot at coppafisher/omp/mean_spot.npy is used.
omp_mean_spot =


[basic_info]
; The *basic_info* section indicates information required throughout the pipeline.

; Round that is the anchor
anchor_round =

; Channel in anchor round used as reference and to build coordinate system on. Usually channel with most spots.
; Leave blank if anchor not used.
anchor_channel = 27

; Channel in anchor round that contains *DAPI* images. This does not have to be in `use_channels`
; as anchor round is dealt with separately. Leave blank if no *DAPI*.
dapi_channel = 0


; Channels in imaging rounds to use throughout pipeline. Leave blank to use all.
use_channels =

; Imaging rounds to use throughout pipeline. Leave blank to use all.
use_rounds =

;will delete soon
use_anchor = true

; z planes used to make tile .npy files. Leave blank to use all.
; If 2 values provided, all z-planes between and including the values given will be used.
use_z =

; Tiles used throughout pipeline. Leave blank to use all.
; For an experiment where the tiles are arranged in a 4 x 3 (ny x nx) grid, tile indices are indicated as below:
;
; | 2  | 1  | 0  |
;
; | 5  | 4  | 3  |
;
; | 8  | 7  | 6  |
;
; | 11 | 10 | 9  |
use_tiles =

; Dyes to use when when assigning spots to genes. Leave blank to use all.
use_dyes =

; Name of dyes used in correct order. So for gene with code `360...`,
; gene appears with `dye_names[3]` in round 0, `dye_names[6]` in round 1, `dye_names[0]` in round 2 etc.
; If left blank, then assumes each channel corresponds to a different dye i.e. code 0 in code_book = channel 0.
; For quad_cam data, this needs to be specified.
dye_names = ATTO425, AF488, DY520XL, AF532, AF594, AF647, AF750

is_3d = true

; Specific images can be set to empty if they are corrupted. They will be kept as zeroes, causing no affect on the gene
; calling. Each bad image is added following the notation `bad_trc = t1, r1, c1, t2, r2, c2, ...` such that bad_trc must
; have a multiple of 3 number of integers inside it.
bad_trc =

; Reverse tiles along the x direction.
reverse_tile_positions_x = false

; Reverse tiles along the y direction.
reverse_tile_positions_y = false

channel_camera =

channel_laser =


[notifications]
; The *notifications* sections contains parameters related to notifying the user about the coppafisher pipeline.

; The filename where every coppafisher message is logged.
log_name = pipeline.log

; See coppafisher/log/base.py for different severity levels. A log with severity >= minimum_print_severity will be printed
; to the terminal.
minimum_print_severity = 20

; Allow notifications to the Operating System. Works for MacOS, Windows, and Linux using Python package plyer.
allow_notifications = false

; Send a notification to the Operating System when the pipeline crashes.
notify_on_crash = true

; Send a notification to the Operating System when the pipeline completes successfully.
notify_on_completion = true

; Email for the account that will send the email. Must be an email with Google SMTP enabled.
sender_email = coppafisher@gmail.com

sender_email_password =

; Email address to receive a message when coppafisher finishes running or crashes.
email_me =


[extract]
; The *extract* section contains parameters which specify how to save the untiltered, raw microscope images to produce
; the .zarr files saved to `file_names['tile_dir']` in the 'extract' subdirectory.

; The number of 90 degree rotations on the x/y planes applied to each extracted tile individually. A positive number is
; an anti-clockwise rotation.
num_rotations = 1

; If an extracted image z plane has a mean below z_plane_mean_warning, then a warning is raised.
z_plane_mean_warning = 125


[filter]
; Here we specify filtering parameters used to filter raw, extracted images which are then re-saved as zarr arrays
; inside the `filter` notebook page.

; The number of CPU cores to leverage in parallel when filtering images.
; If blank, num_cores is computed by the amount of available memory found at the start of filter.
num_cores =

; The maximum number of additional CPU cores allowed to be used during filter.
max_cores = 4

; The file path to a .npz numpy file containing an array at key "arr_0". The array must have shape
; len(use_channels) x max_tile_radius where `max_tile_radius = ceil(sqrt(2 * (tile_length / 2) ** 2))`.
; Each tile's pixel (for every z plane) is divided by the value found in this array at the radius corresponding to the
; pixel's position (linearly interpolated if applicable).
; This is done before Wiener deconvolution to correct for brightness drop-off due to the experimental setup along x/y.
; The normalisation only applies for sequencing channels.
;
; If kept blank and use_channels is 5, 9, 14, 15, 18, 23, 27 or 5, 9, 10, 14, 15, 18, 19, 23, 27 then the default at
; coppafisher/setup/seven_channel_normalisations.npz or coppafisher/setup/nine_channel_normalisations.npz is used
; respectively. If neither of these apply, then no radius normalisation is applied.
channel_radius_normalisation_filepath =

; The file path to a .npz numpy file containing an array at key "arr_0". The array must have shape max_tile_radius where
; `max_tile_radius = ceil(sqrt(2 * (tile_length / 2) ** 2))`. Each dapi tile's pixel (for every z plane) is divided by
; the value found in this array at the radius corresponding to the pixel's position (linearly interpolated if
; applicable).
; This is done before Wiener deconvolution to correct for brightness drop-off due to the experimental setup
; along x/y. The normalisation only applies for sequencing channels.
;
; If kept blank and dapi_channel is 0 and use_channels is 5, 9, 14, 15, 18, 23, 27 or 5, 9, 10, 14, 15, 18, 19, 23, 27,
; then the default at coppafisher/setup/dapi_channel_normalisations.npz is used.
dapi_radius_normalisation_filepath =

; Constant used to compute wiener filter from the `psf`.
wiener_constant = 10


[find_spots]
; The *find_spots* section contains parameters which specify how to convert the images produced in the filter section
; to point clouds.


; nb.find_spots.auto_thresh is set to `auto_thresh_multiplier * nth percentile(abs(image_mid))` where `image_mid` is the
; filtered image produced for tile t, round r, channel c at z plane floor(im_z / 2) and n is `auto_thresh_percentile`.
; This is used as the intensity threshold for spot detection. If the calculated intensity threshold is zero, it falls
; back to auto_thresh_multiplier.
auto_thresh_multiplier = 45.0

; See auto_thresh_multiplier for details.
auto_thresh_percentile = 10

; When true, the auto threshold is set to auto_thresh_multiplier if the computed auto threshold is zero.
auto_thresh_clip = false

; For a pixel to be detected as a spot, two conditions must be met:
; 1) The pixel intensity is above the computed nb.filter.auto_thresh[t, r, c] for the particular tile, round, channel.
; 2) The pixel is the largest intensity in a local ellipsoid region, its size is governed by radius_xy and radius_z.
radius_xy = 5

radius_z = 2

; For the sequencing round/channel images, the dimmest found spots are removed until there is no more than
; floor(max_spots_percent * tile_sz * tile_sz / 100) spots on each z plane.
max_spots_percent = 0.0094

; Used in *coppafisher/find_spots/base/check_n_spots*
;
; A warning will be raised if for any tile, round, channel the number of spots detected is less than:
;
; `n_spots_warn = n_spots_warn_fraction * max_spots * nb.basic_info.nz`
;
; where `max_spots` is `max_spots_2d` if *2D* and `max_spots_3d` if *3D*.
n_spots_warn_fraction = 0.1

; Used in *coppafisher/find_spots/base/check_n_spots*. An error is raised if any of the following are satisfied:
;
; * For any given channel, the number of spots found was less than `n_spots_warn` for at least
; the fraction `n_spots_error_fraction` of tiles/rounds.
;
; * For any given tile, the number of spots found was less than `n_spots_warn` for at least
; the fraction `n_spots_error_fraction` of rounds/channels.
;
; * For any given round, the number of spots found was less than `n_spots_warn` for at least
; the fraction `n_spots_error_fraction` of tiles/channels.
n_spots_error_fraction = 0.5


[stitch]
; The *stitch* section contains parameters which specify how the overlaps between neighbouring tiles are found.


; The expected fractional overlap between tiles in the x/y directions.
expected_overlap =



[register]
; The *register* section contains parameters which specify how the affine transforms from the ref_round/ref_channel
; to each imaging round/channel are found from the shifts found in the *register_initial* section.

; the fluorescent beads are detected using a circular hough transform. This requires an estimate of the bead radii in
; yx pixels. The bead radii should be estimated from the raw images.
bead_radii = 10, 11, 12

; the optical flow algorithm is run on down-sampled images in yx. This parameter specifies the down-sampling factor.
sample_factor_yx = 4

; the number of yx chunks to break the downsampled image into for optical flow.
chunks_yx = 5

; the overlap between chunks as a ratio of the chunk size,
overlap_yx = 0.25

; the optical flow algorithm works by comparing a window of pixels in the reference image to a window of pixels in the
; target image. This parameter specifies the radius of the window.
window_radius = 8

; optical flow is interpolated in between good performing regions. This parameter specifies the size of the smoothing
; kernel used in the interpolation.
smooth_sigma = 10, 10, 5

; Optical flow can work in parallel. This specifies how many CPU cores to use. Default: maximum number of CPU cores.
flow_cores =

; the maximum shift in y, x and z that can be detected by the optical flow algorithm. any larger shifts will be
; detected as the maximum shift.
flow_clip = 40, 40, 15

; Basically the distance in y and x pixels below which neighbours are a good match.
neighb_dist_thresh_yx = 5

; The distance threshold in z pixels below which neighbours are a good match.
; If not given, it is set to `ceil(neighb_dist_thresh_yx * pixel_size_yx / pixel_size_z)`
neighb_dist_thresh_z =

; minimum number of spots required to run icp on a given t, r, c
icp_min_spots = 100

; maximum number of iterations for icp
icp_max_iter = 50


[call_spots]
; The *call_spots* section contains parameters which specify how the spots are assigned to genes and how certain scale
; factors are computed.

; Subtract the 25th percentile from each round for every detected spot. This is done after applying the initial colour
; normalisation factors.
background_subtract = false

; This is the threshold for spots to be used for computing bled codes (tile independent and tile dependent), the
; bleed matrix and thus subsequently the scale factors.
gene_prob_threshold = 0.9

; The intensity threshold applied to remove dim, noisy spots from the spot selection used during call spots. Both the
; probability threshold and the intensity threshold must be met for a spot to be used.
gene_intensity_threshold = 0.2

; This is a list of length n_channels_use and specifies the target brightness for each channel in its brightest dye.
; for 7 channels we typically use [1, 1, 0.9, 0.7, 0.8, 1, 1] as the target values.
; for 9 channels we typically use [1, 0.8, 0.2, 0.9, 0.6, 0.8, 0.3, 0.7, 1] as the target values.
; If left blank, pipeline will check n_channels_use and set to the relevant option above.
target_values =

; This is a list of length n_channels_use and specifies the dye we will make brightest for each channel
; for 7 channels we typically use [0, 1, 3, 2, 4, 5, 6] as the target values.
; for 9 channels we typically use 0, 1, 1, 3, 2, 4, 5, 5, 6 as the target values.
; If left blank, pipeline will check n_channels_use and set to the relevant option above.
d_max =

; This is the concentration parameter used in the von Mises-Fisher distribution for the spot colours. A value of 0
; assigns uniform probability to all genes, while a large value assigns a high probability to the most likely gene.
; For 73 genes, we typically use 2. For 300+ genes, we typically use 4.
; If left blank, pipeline will check how may genes are used and set it to log(1 + n_genes // 75) + 2
kappa =

; This is the number of spots necessary to significantly alter the mean vector of spot colours parallel to the
; expected colour
concentration_parameter_parallel = 10

; This is the number of spots necessary to significantly alter the mean vector of spot colours perpendicular to the
; expected colour
concentration_parameter_perpendicular = 50


[omp]
; The *omp* section contains parameters which are use to carry out orthogonal matching pursuit (omp) on every pixel,
; as well as how to convert the results of this to spot locations.

; The percentile used to compute the minimum intensity threshold. It assumes that at least
; `minimum_intensity_percentile`% of the middle z plane pixels are not from spots.
; Setting this to 50 is a median.
minimum_intensity_percentile = 5

; Only residual colours with intensity >= intensity_threshold are computed on for gene pixel scores. The others are left
; at zero. The intensity is defined as min over rounds (max over channels (I_rc)), where I_rc is the residual colour
; intensity in sequencing round r, channel c that has been scaled by the call spots colour_norm_factor. The intensity
; threshold is calculated as `minimum_intensity_percentile`th percentile multiplied by `minimum_intensity_multiplier` on
; the middle z plane.
minimum_intensity_multiplier = 6

; The maximum number of genes that can be assigned to each pixel i.e. number of iterations of omp.
max_genes = 5

; The alpha parameter in the round-channel pair error estimation.
; Check the OMP method in the docs for details.
alpha = 120

; The beta parameter in the round-channel pair error estimation.
; Check the OMP method in the docs for details.
beta = 1

; Pixels only get a new gene assignment when that gene has an absolute `dot_product_score` greater than
; dot_product_threshold. Therefore, this is a stopping criterion for OMP.
dot_product_threshold = 0.72

; The number of pixels that pixel scores are computed on at once. If blank, the number of pixels is calculated based on
; the available PC memory.
subset_pixels =

; If true, OMP will always run on the CPU and never use a GPU, even if available.
force_cpu = true

; A maxima is not considered an OMP spot if there is another, larger score maxima within this many pixels away in the x
; or y direction of the same gene.
radius_xy = 3

; A maxima is not considered an OMP spot if there is another, larger score maxima within this many pixels away in the z
; direction of the same gene.
radius_z = 2

; Any OMP spot scores below this threshold are not saved. Used to cut out false gene reads.
score_threshold = 0.1


[thresholds]
; The *thresholds* section contains the thresholds used to determine which spots pass a quality thresholding process
; such that we consider their gene assignments legitimate.


; Final accepted reference and OMP spots both require `intensity > thresholds[intensity]`.
; If not given, will be set to same value as `nb.call_spots.gene_efficiency_intensity_thresh`.
; intensity for a really intense spot is about 1 so `intensity_thresh` should be less than this.
intensity =

; Final accepted spots are those which pass quality_threshold which is
; `nb.ref_spots.scores > thresholds[score_ref]` and `nb.ref_spots.intensity > intensity_thresh`.
; quality_threshold requires score computed with *coppafisher/call_spots/dot_prodduct/dot_product_score* to exceed this.
; Max score is 1 so must be below this.
score_ref = 0.25

; Final accepted OMP spots are those which pass quality_threshold which is:
; `score > thresholds[score_omp]` and `intensity > thresholds[intensity]`. `score` is given by:
; `score = (score_omp_multiplier * n_neighbours_pos + n_neighbours_neg) /
;   (score_omp_multiplier * n_neighbours_pos_max + n_neighbours_neg_max)`
; Max score is 1 so `score_thresh` should be less than this.
;
; 0.15 if more concerned for missed spots than false positives.
score_omp = 0.263

score_prob = 0.7

; Final accepted OMP spots are those which pass quality_threshold which is:
; `score > thresholds[score_omp]` and `intensity > thresholds[intensity]`. `score` is given by:
; `score = (score_omp_multiplier * n_neighbours_pos + n_neighbours_neg) /
;   (score_omp_multiplier * n_neighbours_pos_max + n_neighbours_neg_max)`
;
; 0.45 if more concerned for missed spots than false positives.
score_omp_multiplier = 0.95


[reg_to_anchor_info]
; Information relevant to the separate round registration


; Positions of bottom left corner of squares that we are comparing
full_anchor_y0 = 0
full_anchor_x0 = 0
partial_anchor_y0 = 0
partial_anchor_x0 = 0

; Side length of squares that we are comparing
side_length =

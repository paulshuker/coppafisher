2025/MM/DD Version 1 Patch (v1.0.3):
 * General: Dropped Python 3.10 support.
 * General: Pciseq .csv spot coordinates are now given relative to a global (0, 0, 0) origin.
 * General: New export_pciseq_dapi_image function for the pciseq DAPI image described in Advanced Usage documentation.
 * Viewer: Now supports multiple background images.
 * Viewer: New gene ordering by cell type default option.
 * Viewer: New `dapi_detailed` and `anchor_detailed` background image options.
 * Viewer: Default background image is now `dapi_detailed`.
 * Viewer: `tailed_arrow` napari symbol now supported in the gene marker files.
 * PDF Diagnostics: Gene heat map colour scale is now logarithmic.


2025/01/20 Version 1 Patch (v1.0.2):
 * Extract: Saved image chunk sizes are no longer too small fix.


2025/01/10 Version 1 Patch (v1.0.1):
 * Documentation: Hyperlink and OMP method fixes.
 * Documentation: New disabling the GPU instructions in advanced usage.
 * Viewer: Can now middle mouse click a gene spot in the gene legend to toggle the gene colour on/off.
 * Viewer: Gene legend help when pressing 'h'.
 * Register: Larger correlation chunk size to improve compression and reduce file count.
 * Diagnostics: Viewer2D removed.
 * PDF Diagnostics: Gene heat map colour map changed and bin size increased.
 * Spot Colours: Gathering of filter image data could crash if subset is small fix.


2025/01/06 Version 1 Major Release (v1.0.0):
 * General: Coppafish is now called Coppafisher.
 * General: Version 1.0.0 onwards automatically detects incompatible notebook versions. An automatic suggested course
    of action is given if a compatibility problem is found during runtime.
 * General: Pre-sequence channels are no longer supported.
 * General: Python 3.11 is now supported.
 * General: Python 3.9 is no longer supported.
 * General: Many package updates.
 * General: All output variables are now stored within the notebook except for extract images, PDF diagnostics, and
    pipeline.log files.
 * General: New system notification support for both pipeline crashes and completions.
 * General: The notebook is now faster at saving and loading, supports zarr arrays/groups, and has overwrite protection.
 * General: Better Command Line Interface (CLI) explained in the documentation.
 * General: Users can safely move the output directory and/or tiles directory mid-pipeline.
 * General: The notebook can be moved location without breaking usages fix.
 * General: Incorrect numpy data types within the notebook fixed.
 * General: New basic_info config parameters reverse_tile_positions_x and reverse_tile_positions_y to reverse the tile
    positions if they are in the wrong places along x and/or y.
 * General: Clearer config warnings/errors.
 * General: Security patches for zipp, urllib3, scikit-learn, tornado, requests, and certifi.
 * General: Package versions are now logged in the pipeline.log file.
 * General: Numpy versions >=2.0, <2.1 now supported.
 * General: Improved config parameter validation.
 * Documentation: New documentation for exporting data to pciSeq, skipping bad microscope images, running background
    processes, deleting notebook pages, and retrieving config data from the notebook.
 * Documentation: Detailed method description for find spots, stitch, call spots, and OMP.
 * Viewer: The Viewer is now faster and more responsive.
 * Viewer: The user can toggle max intensity projection on/off on the background image.
 * Viewer: The user can adjust the size of spots using the marker size slider.
 * Viewer: Napari has been updated to version 0.5.4, improving stability.
 * Diagnostics: New find spots viewer.
 * PDF Diagnostics: New gene spatial heat map PDFs created at runtime.
 * Extract: Default z_plane_mean_warning 200 -> 125.
 * Extract: Images are now rotated during extract instead of filter. So, the config parameter `num_rotations` has been
    moved from `filter` to `extract`.
 * Filter: Images are now saved as float16 instead of uint16.
 * Filter: Images are now saved in the 'filter' notebook page.
 * Filter: Images are no longer multiplied by a scalar.
 * Filter: The PSF used for image filtering is no longer computed. It is a config input. There is a default PSF saved at
    coppafisher/setup/default_psf.npz.
 * Filter: Optimised zarr image chunking.
 * Filter: Removed legacy filter options: difference of Hanning, image smoothing, and dapi top hat filter.
 * Filter: Warning issues when a filtered image contains adjacent pixels at the maximum possible integer value.
 * Find spots: Automatic spot intensity threshold (nb.find_spots.auto_thresh) is now computed in find_spots, not filter.
 * Channel Register: Now done more thoroughly, with the bead images being shift corrected with a phase correlation
    before any registration begins. This is to make the job of ICP easier.
 * Channel Register: Index error in channel registration fixed, it lead to the wrong channel corrections being applied.
 * Channel Register: The fluorescent bead images are now isodata thresholded before circle detection, to make the
    circle detection more robust. The impact of this has been that the circle centres are much more accurate and closer
    to the true centre of the bead.
 * Stitch: The stitching section has been refactored to be more robust and faster. Stitching time has gone from 15
    minutes to 5 minutes for a 3x4 tile dataset.
 * Stitch: The stitching section now works on dapi images for each tile instead of point clouds. The shifts between
    tiles are now computed with a phase correlation instead of point clouds exhaustively searching for the best shift.
 * Stitch: The shifts computed are now given a score, which is the squared pearson correlation of the shifted image
    and the reference image in the overlapping region. This score is then used in the computation of the final shifts,
    where we deal with the fact that our problem is over-specified. The scoring is used as a weight and the results are
    better than before.
 * Stitch: The stitching diagnostics have been replaced with 2 new viewers, one for viewing the image as a checker-
    board patten in green and red, with overlapping regions in yellow, and the other for viewing the shifts computed
    for each tile.
 * Call spots: Some variables are now saved as zarr arrays to reduce memory usage and notebook read time.
 * Call spots: Config parameter bad_trc now works with new colour normalisation computation fix.
 * Call spots: The anchor gene scores are no longer a dot product. They are now a "round dot product" to put similar
    importance on each sequencing round matching the gene bled code.
 * OMP: OMP is now truly orthogonal fix. Before, the new gene was weighted using only the residual pixel colour. Now,
    all genes are re-weighted using the full pixel colour and a new gene is found using the latest residual colour.
 * OMP: Gene assignment now uses a dot product with similar round contribution. This is similar to the anchor method
    scoring.
 * OMP: OMP "coefficients" are now called "pixel scores" to differentiate them from gene weights.
 * OMP: The final OMP pixel scores are found after gene weights are computed. Check the OMP method documentation for
    details.
 * OMP: A pixel is not run through OMP if its intensity is below minimum_intensity. The minimum_intensity is computed as
    the median over all intensities in the central z plane multiplied by minimum_intensity_multiplier (default 4). A
    pixel's intensity is defined as `min over rounds (max over channels (|I_rc|))`, where I_rc is the pixel's image
    intensity in sequencing round r, sequencing channel c after image registration and after call spot scaling.
 * OMP: After each tile, OMP saves the progress and can continue where it left off.
 * OMP: Pixel colours are no longer background fitted before being run through OMP. OMP stops iterating on a pixel if a
    background gene is the next best assignment.
 * OMP: The OMP mean spot is fixed and no longer computed. It is less broad, leading to improved spot scores.
 * OMP: Less memory intensive by saving each tile's results separately.
 * OMP: Results are now compressed.
 * OMP: New subplots for the Viewer. Press "h" to show all subplot shortcuts.
 * OMP: Faster compute times with and without cuda.
 * OMP: Better memory usage.


2024/12/11 Alpha Update (v0.10.9):
 * OMP now removes duplicate spots in tile overlap areas.
 * OMP no longer saves progress after each tile is complete.


2024/08/22 Alpha Update (v0.10.8):
 * OMP saves progress after each tile is complete.


2024/08/22 Alpha Update (v0.10.7):
 * Filter intensity threshold can be zero integer edge case has been fixed.


2024/05/15 Alpha Update (v0.10.6):
 * Disk loading of ND2 files is now faster during extract.


2024/05/14 Alpha Update (v0.10.5):
 * Pytorch CPU is now a default dependency.
 * Optical flow results are saved as compressed zarr files instead of uncompressed numpy arrays.
 * Coppafish can send email notifications on completed pipelines and crashes.
 * OMP has been overhauled.
 * New diagnostic Viewer2D added.
 * The OMP computed spot is now computed on a subset of one tile, not the full tile.
 * OMP is faster and the entire tile is loaded into memory before running each tile.
 * Removed inputimeout package dependency.
 * Max Intensity Projection of background images added to main viewer as option.
 * Fluorescent beads registration bug fix.
 * New viewer for registration of fluorescent beads.
 * Redundant warnings silenced.
 * Default starting position for registration viewer now the registered image.
 * New diagnostic in main viewer shows top 10 best fitted genes to a given spot along with their associated scores.


2024/04/23 Alpha Update (v0.10.4):
 * Bug in Register which was causing large shifts not to be detected has been fixed. A global shift is now computed
    between the two images and the shift is applied to the second image before computing the local shifts.
 * OMP unbound variable i_added_genes bug fixed in pytorch GPU.


2024/04/18 Alpha Update (v0.10.3):
 * OMP crash on empty coef_image bug fix.


2024/04/18 Alpha Update (v0.10.2):
 * OMP spot shape wrongly computed has been fixed.
 * OMP spot shape maximum size now 27, 27, 9 -> 15, 15, 9 by default.
 * OMP score threshold changed 0.1 -> 0.15 by default.
 * idna package security update.
 * Docs update.


2024/04/15 Alpha Update (v0.10.1):
 * User documentation updates.
 * Filter image scaling is reduced to further avoid clipping.
 * New OMP gene counts figure in _omp.pdf.
 * Pillow buffer overflow vulnerability fixed.
 * HTTP request sometimes failing to GitHub bug caught.
 * New spot position histograms in _call_spots.pdf and _omp.pdf.
 * New image viewing diagnostics for the users, explained in the documentation.
 * Simplified advanced usage for moving output and tile directories.
 * _ref_call_spots.pdf now called _call_spots.pdf.
 * New ICP Viewer for point clouds.
 * New optical flow viewer.
 * New optical flow config parameter `flow_cores` in `register` section.
 * OMP checkpoint bug fixed.
 * Improvements in reading old reg results.
 * Coppafish's logging module now called 'log' to remove conflicting package names.
 * streamlined generation of reg images, meaning transforms no longer need to be applied when viewer is shown
 * Whole registration viewer has been refactored and improved making it easier to compare between different methods
    of registration.
 * Support for removing a bad tile round channel from any analysis - this includes new nbp basic variable and config
    variable to remove a bad tile round channel.
 * integrated bad_trc into new indexing method so that it is easier to remove a bad tile round channel from
    each part of the pipeline where we don't want bad trcs.
 * Bad trc are now dealt with in call spots. For a given tile, if round r is bad, gene probs are computed from the
    remaining rounds. Gene efficiencies are computed only from spots living on tiles with no bad rounds.
 * New registration viewer for viewing the registration results.
 * New ICP viewer for viewing the ICP results, including the point clouds, buttons for switching between registered and
    unregistered images, and a smoothed score image in the background showing where good shifts are.
 * New bg scale viewer for viewing the background scale images. This also led to a change in the way we compute bg
    scales, done on unblurred images. This is done by taking a small region of both images, looking at regions
    where bg is high and taking the median of the ratio of the two images in these regions. The previous
    method looked at approx 10 z-planes and the boundary z-planes were causing an issue. Regression was also
    not robust to outliers.
 * new entire overlay function allows users to select any 2 rc pairs and overlay them in the viewer in anchor frame of
    reference. This is different from just viewing against anchor. Can be useful for background reg viewing. z-params
    make loading faster.


2024/03/26 Alpha Update (v0.10.0):
 * OMP scoring has been changed.
 * Optical flow added to registration.
 * Default Wiener deconvolution configuration in the filter stage is improved.
 * Difference of Hanning is now turned off in filter by default. This can be changed by setting the new variable
    difference_of_hanning to true in the scale config section.
 * Wiener deconvolve now does not shift pixel values after filtering fix.
 * Wiener deconvolution is optimised in pytorch CPU.
 * The find spots intensity threshold multiplier "auto_thresh_multiplier" has been changed from 10 -> 17 by default.
 * ICP minimum spot distance threshold variables neighb_dist_thresh_yx and neighb_dist_thresh_z added.
 * Sobel filtering in register is now turned off by default.
 * Scale section removed, this is now part of filter.
 * A warning is raised if the latest online coppafish version does not match the current coppafish version.
 * Pytorch GPU out of memory fix attempt.
 * Detecting spots is pytorch optimised and less memory intensive on all environments.
 * Incorrect `hist_counts` values in extract and filter pages. This caused the filter/extract PDF histograms to be
    incorrectly ranged along the x axis. This has now been fixed.
 * The ICP Mean Squared Error (MSE) for debugging has been improved. This can be viewed by clicking MSE in the
    RegistrationViewer.
 * New _omp.pdf diagnostic added.
 * The RegistrationViewer can be imported more easily by `from coppafish import RegistrationViewer`.
 * New config variable in filter called "psf_max_spots". The default is 5,000, the same as previous versions.
 * Added pipeline warnings.
 * The pipeline.log logs error tracebacks when crashing.
 * Removed redundant max_background_scale_cores config variable in register.
 * New `invalid_auto_thresh` notebook variable in filter_debug added.
 * Optimised plotting function `remove_background` in spot_colors.
 * New support to safely move output and tile directories.
 * Shape of OMP colours in notebook changed.
 * OMP config initial_intensity_thresh_percentile default 25 -> 50.
 * Docs + logo update for coppafish.
 * Removed all jax code.
 * Removed obsolete "continuous_dapi" config variable in extract section.
 * anchor_channel is default to 27, dapi_channel defaults to 0, dye_names defaults to 'ATTO425, AF488, DY520XL, AF532,
    AF594, AF647, AF750'


2024/03/11 Alpha Update (v0.9.4):
 * Background subtraction is now using the correct alignment parameters so it is actually working again
 * Background subtraction blurring was turned off by a bug but this is no longer the case
 * Background subtraction is only done if the background pixel is positive, which gives much better results
 * Sobel filtering was being applied by default on alpha. If there was no parameter for sobel in Merry, then this would
    at least partially explain why it was taking longer Izzie
 * Fixed the diagnostic to turn off the background image in the main viewer by clicking i
 * Fixed the viewer to view the spots in the gene efficiency viewer
 * All viewers are back in the traditional black layout so that we can see the white text on them again
 * An OMP optimisation which reduces the amount of read time by a factor of 2. This speeds up the OMP step
    significantly.


2024/03/04 Alpha Update (v0.9.3):
 * New "_register.pdf" diagnostic PDF added during pipeline and when calling BuildPDF.
 * Detect spots is now batched when run on too many spots to avoid memory crashing fix.
 * Gene efficiency in the Viewer bug fix.


2024/02/15 Alpha Update (v0.9.2):
 * OMP is now significantly faster after vectorising an out of bounds check for spot positions.
 * All coppafish logs are saved in a file with default name pipeline.log, the name can be changed by editing the
    file_names config variable log_name.
 * Out of memory issue in pytorch GPU fix.
 * The Viewer's gene legend is dark themed again.
 * Viewer documentation added.


2024/02/12 Alpha Update (v0.9.1):
 * Vectorised find_spots detect.py numpy code for faster speeds in OMP.
 * The diagnostic PDF is now created after scale, extract, and filter sections for the user to see.
 * Pre-sequence images are now blurred before computing the background scale and subtracting from sequencing images.


2024/02/07 Alpha Update (v0.9.0):
 * The appropriate, tested package versions are installed by `pip install -r requirement...` with the wanted
    requirements text file.
 * Coppafish no longer has installation options, you just do `pip install -e .` to install coppafish after installing a
    requirements text file.
 * New support for pytorch on the CPU as a new way to run most of OMP functions and some parts of call spots using CPU.
    The appropriate packages can be installed by `pip install -r requirements-pytorch.txt`.
 * Pytorch 2.2.0 + cuda 12.1 is supported. The GPU is used to run parts of OMP. In detail, `get_all_coefs` will run
    with all tensors on the GPU when looping through OMP iterations. Then, when complete, the returned output will be
    on the CPU to not run out of memory on the GPU. The required packages can be installed by
    `pip install -r requirements-pytorchgpu.txt`.
 * Support for Windows when running coppafish with pytorch, pytorch with a GPU, or numpy-only.
 * For a single spot and round, if the largest magnitude spot colour is negative, its sign is flipped before computing
    the Von-Mises gene probability.
 * OMP call spots colour norm factor applied incorrectly has now been fixed.
 * "extract_debug" notebook page checks still being used are now removed since the page does not exist any more fix.
 * Coppafish version number is printed at the start of a pipeline run.
 * Ref spot PDF plots are now consistent with x and y axes.


2024/02/06 Alpha Update (v0.8.3):
 * Out of bounds in z direction image retrieval in register section fix.


2024/01/31 Alpha Update (v0.8.2):
 * The default config value for r_smooth in filter section is now 1, 1, 2.
 * The notebook now backs itself up before re-saving itself. Therefore, there is always a fully complete notebook saved
    in case the new one being saved gets corrupted.
 * Removed 'extract_debug' notebook page.
 * Comparing spot colour and predicted code in Viewer bug fixed.
 * The mean spot colour for probabilities > 0.7 now plotted in ref_spots.pdf.
 * New documentation (https://reillytilbury.github.io/coppafish/) for users.
 * Removed 'extract_debug' notebook page.


2024/01/26 Alpha Update (v0.8.1):
 * Bleed matrix computation in call spots has been slightly improved and is capable of reverting to a default bleed
    matrix if there are too few genes to compute with.
 * Background scale computation for the preseq is thought to be improved and only computed using a single, registered z
    plane. Now only a scale factor is computed, no offset.
 * Config variable auto_n_shifts in stitch section is no longer a magic number, it now scales with tile size fix.
 * Dask array was converted to a float for jobs raw data has been fixed.
 * view_find_spots diagnostic is now fixed.
 * view_stitch diagnostic is now fixed.
 * Config variable n_background_scale_threads in register renamed to max_background_scale_cores
 * Tile, round, channel indexing for extract, filter and find_spots now originates from functions in utils/indexing.py.
 * requirements.txt and requirements-optimised.txt files for python==3.9 fixed.
 * Sub Volume Registration (SVR) now has a tapered window applied to each subvolume image (Hanning in x and y, a Tukey
    window in z). This removes x, y and z axes aligned fake registration solutions caused by the image's harsh border.
 * Removed call_spots bleed_matrix.py unused code.
 * Removed outdated 2d pipeline code.
 * The notebook duplicates itself before adding and saving with a new notebook page included. This way if the code is
    user interrupted during a save, a backup notebook is available to revert to that will not be corrupted. The backup
    will automatically be deleted after the new save is fully complete.
 * New notebook tile by tile combining functionality reimplemented.


2024/01/12 Alpha Update (v0.8.0):
 * Filtered images are now saved in ['file_names']['tile_dir']/filter and extract images are saved in
    ['file_names']['tile_dir']/extract.
 * Removed notebook variables pixel_unique_values and pixel_unique_counts from ['filter_debug'] and ['extract_debug']
    sections. These will be saved locally in the tile output directory.
 * Extract and filter now continue where they left off. They are checkpoint-ed after each iteration.
 * Optimised choice of zarr compressors for extract and filter through benchmarking.
 * The PDF diagnostic saves a separate pdf for each section, these sections are then not rebuilt if they already exist.
 * Some of the subplots inside the Viewer had the colour norm applied incorrectly, this has been fixed.
 * Each gene page in the PDF diagnostic is now computed correctly.
 * Removed old function called regularise_auto_thresh relating to filter that is never used any more.
 * Renamed get_extract_info to get_filter_info and moved it to the filter section.
 * requirements.txt files for optimised setup option.
 * 'plotting' option is removed, the plotting packages are always installed.
 * Deleting unused file image_stitcher.py from repository.


2024/01/09 Alpha Update (v0.7.2):
 * Filter will re-filter if the filter notebook page does not exist to correctly compute the filter variables bug fix.
 * Bled codes are normalised for each gene outside of a gene for loop, reducing OMP computation time.
 * The Viewer now has every hotkey described, these can be shown by opening the Viewer then pressing Shift + k.
 * Improved pixel value histograms in the PDF diagnostics for extract and filter.
 * BuildPDF is called fewer times throughout the pipeline to reduce compute time.
 * Middle z plane selection for registration with few z planes bug fixed.
 * Handling of invalid spot colours and their background colours in spot_colors bug fix.
 * jax memory leak in OMP is reduced or fixed.
 * Subset image loading for extract and filtered images is now faster on zarr.
 * Improved chunking of y and x dimensions on .zarr files.
 * Zarr arrays are read faster by using more available cores on the CPU to decompress files.
 * RoboMinnie `n_rounds != n_channels` integration test.


2024/01/03 Alpha Update (v0.7.1):
 * Bug fix for gene efficiency calculation in call_reference_spots.py.


2024/01/02 Alpha Update (v0.7.0):
 * New diagnostics PDF builder has been created. It can be imported through `from coppafish import BuildPDF`, then with
    the notebook file path as nb_path, it can be run by `BuildPDF(nb_path)`. It currently shows diagnostic plots for
    scale, extract, filter and find_spots sections. The PDF builds itself at runtime after find_spots, stitch,
    reference_spots and OMP and saved as diagnostics.pdf in the output directory.
 * New coppafish installation instructions shown on the GitHub homepage (readme.md).
 * Frozen stable package versions given in the "requirements.txt" file, see GitHub homepage for instructions on
    installation.
 * Bug fixed most of the Viewer plots with the updated call_spots colour norm factor and bleed matrix variables.
 * Gene shape in viewer versus gene legend mismatch bug fix.
 * Removed unnecessary multiplying and dividing by weights in OMP when computing weighted least squares fitting
    (potential speed up).


2023/12/21 Alpha Update (v0.6.1):
 * Extraction directory now created in extract step of pipeline bug fix.


2023/12/21 Alpha Update (v0.6.0):
 * `export_to_pciseq` function now supports exporting gene probabilities.


2023/12/19 Alpha Update (v0.5.0):
 * Extract and filter has now become two separate sections in the notebook. Extract runs first, then filter. We save
    raw, extracted images in the tiles_dir/raw directory. Also, when running from raw ND2 files, we keep all the found
    metadata from the ND2s for each round in a file called 'nd2_metadata_r{r}.pkl' inside the tiles_dir/raw directory.
    This way we hope the raw ND2 files can be deleted without loss of any data.
 * All filter related config variables are now inside a new [filter] config section, i.e. variables r_dapi,
    r_dapi_auto_microns, auto_thresh_multiplier, deconvolve, all psf-related variables, wiener_constant,
    wiener_pad_shape, n_clip_warn, n_clip_error, n_clip_error_images_thresh, num_rotations and pre_seq_blur_radius.
 * Default extraction file type (['extract']['file_type']) is now .zarr instead of .npy. This file_type is also used
    when saving the filtered images in the tiles_dir directory.
 * Multiprocessing to compute background scales now includes no disk reading (safer).
 * The disk reading multiprocessing in OMP has been removed (safer).
 * The git hash and software version for each notebook section is saved when that pipeline section is run through.
 * OMP now runs on a single z plane at a time.
 * Default psf_isolation_dist in 'filter' config section changed from 20 -> 10.
 * psf is calculated on no more than 5,000 isolated spots to stop memory crashes in the filter section. This should be
    more than sufficient to converge.
 * Call spots probability thresholds are not constants any more, they are now computed percentiles based on the gene
    probability values.
 * Shift score hist in SVR diagnostics in the Registration Viewer now does not crash.
 * Round score shift colour-map in SVR diagnostics in the Registration Viewer is fixed when z_subvols is 1.
 * If a notebook is run on two different versions, a warning is given and the user is asked if they want to continue.
 * The notebook now contains variables pixel_unique_values and pixel_unique_counts in 'extract_debug' and
    'filter_debug' pages. They contain a count of every unique pixel in the unfiltered and filtered images for future
    diagnostics.
 * Fixed a register image shifting bug.
 * Fixed deconvolution bug.
 * Fixed reg_images not being saved after crashing on.
 * Fixed bugs when basic_info.use_z does not include 0.
 * Silenced notebook numpy-related warning.
 * Silenced jax CPU warning.


2023/11/16 Alpha Update (v0.4.0):
 * Improved outlier removal for shift calculations in registration.
 * Further optimisations.
 * Memory issue fix in OMP.
 * The Viewer now has a button to show gene calling based on the gene probabilities, labelled as 'Prob'.
 * Various bug, deprecation and warning fixes.


2023/10/28 Alpha Update (v0.3.0):
 * Saving extracted tiles as .npy is the default save file type. Can be changed to .zarr (50% compression) by setting
    config['extract']['file_type'] = .zarr.
 * Compatibility with JOBS datasets.
 * Computing background scale factors is now parallelised.
 * Various bug and warning fixes.


2023/10/10 Alpha Update (v0.2.0):
 * Added background subtraction with 3D registration using DAPI images.
 * Cross-tile brightness difference correction support, probably caused by microscope auto gain control.
 * Updated bleed matrix to allow inter-tile variation.
 * Updated the bleed matrix calculation.
 * Added weighted dot product method with backwards compatibility.
 * Error handling unconnected tiles.
 * Changed spot_no array from uint16 to uint32 for greater spot number support.
 * Registration pipeline now uses DAPI images when necessary.
 * Registration pipeline now computes camera transforms from fluorescent beads, if they exist.
 * Added new config variable [file_names][initial_bleed_matrix] to give a path to a `.npy` initial bleed matrix.
    If left empty, will use the default initial bleed matrix in the source code.
 * Presequence .npy raw files support.
 * Fixed anchor auto threshold being set to zero due to regularisation.
 * OMP's z-chunking now scales with the PC's available memory. We think that more memory means slightly faster OMP.
 * Various bug, warning and deprecation fixes.
 * Utils, call spots and register unit tests.
 * RoboMinnie integration testing for single and multiple tile dataset generation.
